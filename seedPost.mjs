import fetch from 'node-fetch';

const API_URL = 'http://localhost:1337/api';
const API_TOKEN = 'dbe30afa71fc37b71688bded3c0e5243fde200586cb4dd8807d3d1e01e9f3095a4a766a4b428e1ac7baf083438817e0c139cef58e4092e52a33b789224eb1ab943372dd90d1d90b8f1497aa7e5c75ea332c89bd8b0cf5f51983ae0b69ca1c1e414f206194610e92bfcdebde7e4eb9038554f373faba2aec2814ee15196076ac3';

const categories = [
  { name: "Tin c√¥ng ty", slug: "tin-cong-ty" },
  { name: "Xu h∆∞·ªõng ng√†nh", slug: "xu-huong-nganh" },
  { name: "C·∫≠p nh·∫≠t", slug: "cap-nhat" },
  { name: "Gi·∫£i th∆∞·ªüng", slug: "giai-thuong" }
];

const titles = [
  "S√†i Th√†nh Trading: B√°o c√°o doanh thu qu√Ω 1/2025",
  "Xu h∆∞·ªõng th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam 2025",
  "L√£i su·∫•t ng√¢n h√†ng tƒÉng ·∫£nh h∆∞·ªüng th·∫ø n√†o ƒë·∫øn logistics?",
  "Ph√¢n t√≠ch t·ª∑ gi√° ngo·∫°i t·ªá v√† r·ªßi ro t√†i ch√≠nh",
  "S√†i Th√†nh Trading k√Ω h·ª£p ƒë·ªìng h·ª£p t√°c chi·∫øn l∆∞·ª£c",
  "D·ª± b√°o GDP Vi·ªát Nam tƒÉng tr∆∞·ªüng m·∫°nh 2025",
  "Ch√≠nh s√°ch thu·∫ø m·ªõi t√°c ƒë·ªông ng√†nh xu·∫•t nh·∫≠p kh·∫©u",
  "S√†i Th√†nh Trading m·ªü r·ªông th·ªã ph·∫ßn mi·ªÅn T√¢y",
  "D√≤ng v·ªën FDI ƒë·ªï v√†o khu c√¥ng nghi·ªáp tr·ªçng ƒëi·ªÉm",
  "C∆° h·ªôi ƒë·∫ßu t∆∞ t·ª´ Hi·ªáp ƒë·ªãnh EVFTA",
  "S√†i Th√†nh Trading n√¢ng c·∫•p h·ªá th·ªëng qu·∫£n tr·ªã r·ªßi ro",
  "Nh·∫≠n di·ªán xu h∆∞·ªõng ti√™u d√πng n·ªôi ƒë·ªãa h·∫≠u COVID",
  "T·ª∑ l·ªá n·ª£ x·∫•u ng√¢n h√†ng: B√°o ƒë·ªông hay c∆° h·ªôi?",
  "Kinh t·∫ø Vi·ªát Nam tr∆∞·ªõc s√≥ng l·∫°m ph√°t to√†n c·∫ßu",
  "S√†i Th√†nh Trading ƒë∆∞·ª£c vinh danh Top 10 doanh nghi·ªáp logistics"
];

async function createCategories() {
  const categoryIds = {};
  
  for (const category of categories) {
    try {
      const res = await fetch(`${API_URL}/categories`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${API_TOKEN}`,
        },
        body: JSON.stringify({
          data: category
        }),
      });

      if (res.ok) {
        const data = await res.json();
        categoryIds[category.name] = data.data.id;
        console.log(`‚úÖ ƒê√£ t·∫°o category: ${category.name} (ID: ${data.data.id})`);
      } else {
        console.error(`‚ùå L·ªói t·∫°o category "${category.name}":`, await res.text());
      }
    } catch (error) {
      console.error(`‚ùå L·ªói k·∫øt n·ªëi API cho category "${category.name}":`, error);
    }
  }
  
  return categoryIds;
}

async function createSamplePosts(categoryIds) {
  for (let i = 0; i < titles.length; i++) {
    const title = titles[i];
    const slug = title.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
    
    // Ch·ªçn category ng·∫´u nhi√™n
    const categoryNames = Object.keys(categoryIds);
    const randomCategory = categoryNames[Math.floor(Math.random() * categoryNames.length)];
    const categoryId = categoryIds[randomCategory];

    const payload = {
      data: {
        title,
        slug,
        excerpt: "Tin t·ª©c t√†i ch√≠nh n·ªïi b·∫≠t t·ª´ S√†i Th√†nh Trading.",
        content: `Trong th·ªùi ƒë·∫°i c√°c website hi·ªán ƒë·∫°i c·∫ßn t·ªëc ƒë·ªô v√† kh·∫£ nƒÉng m·ªü r·ªông, Strapi ƒë√£ n·ªïi l√™n nh∆∞ m·ªôt gi·∫£i ph√°p Headless CMS m·∫°nh m·∫Ω, d·ªÖ s·ª≠ d·ª•ng v√† linh ho·∫°t.

## T·∫°i sao n√™n ch·ªçn Strapi?

### üåü D·ªÖ d√†ng t·∫°o c√°c Collection Types
Ch·ªâ v·ªõi v√†i c√∫ click trong Strapi Admin Panel, b·∫°n c√≥ th·ªÉ t·∫°o c√°c Collection Types (B√†i vi·∫øt, S·∫£n ph·∫©m, Danh m·ª•c‚Ä¶) ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu c·ªßa website. Vi·ªác n√†y gi√∫p b·∫°n kh√¥ng c·∫ßn vi·∫øt code cho backend t·ª´ ƒë·∫ßu, ti·∫øt ki·ªám h√†ng ch·ª•c gi·ªù l√†m vi·ªác.

### ‚ö°Ô∏è API t·ª± ƒë·ªông sinh ra

>Khi t·∫°o Collection, Strapi t·ª± ƒë·ªông t·∫°o API endpoint cho REST ho·∫∑c GraphQL. V√≠ d·ª•, v·ªõi collection \`posts\`, b·∫°n c√≥ s·∫µn c√°c endpoint nh∆∞ \`/api/posts\` ƒë·ªÉ l·∫•y danh s√°ch ho·∫∑c \`/api/posts/:id\` ƒë·ªÉ l·∫•y chi ti·∫øt, r·∫•t ti·ªán l·ª£i cho frontend.

### üîí Qu·∫£n l√Ω quy·ªÅn truy c·∫≠p

Strapi h·ªó tr·ª£ ph√¢n quy·ªÅn cho ng∆∞·ªùi d√πng Public (kh√°ch) v√† Authenticated (ƒë√£ ƒëƒÉng nh·∫≠p) th√¥ng qua Roles & Permissions. B·∫°n c√≥ th·ªÉ c√†i ƒë·∫∑t quy·ªÅn ƒë·ªçc, vi·∫øt, ch·ªânh s·ª≠a cho t·ª´ng endpoint, gi√∫p tƒÉng c∆∞·ªùng b·∫£o m·∫≠t website.

### üé® H·ªó tr·ª£ upload media

Strapi t√≠ch h·ª£p Media Library cho ph√©p b·∫°n d·ªÖ d√†ng t·∫£i ·∫£nh, video, file‚Ä¶ v√†o server ho·∫∑c k·∫øt n·ªëi CDN (nh∆∞ Cloudinary). ƒêi·ªÅu n√†y c·ª±c k·ª≥ quan tr·ªçng v·ªõi website tin t·ª©c, blog, shop c·∫ßn nhi·ªÅu ·∫£nh ch·∫•t l∆∞·ª£ng cao.

## H∆∞·ªõng d·∫´n c∆° b·∫£n:

### 1Ô∏è‚É£ T·∫°o Collection Type m·ªõi

V√†o Strapi Admin ‚Üí Content-Type Builder ‚Üí Create New Collection Type. ƒê·∫∑t t√™n (v√≠ d·ª•: \`post\`), r·ªìi th√™m c√°c field c·∫ßn thi·∫øt nh∆∞ \`title\`, \`content\`, \`slug\`, \`image\`, \`category\`.

### 2Ô∏è‚É£ ƒê·ªãnh nghƒ©a c√°c field

- **Text:** cho ti√™u ƒë·ªÅ, slug
- **Rich Text:** cho n·ªôi dung chi ti·∫øt
- **Media:** ƒë·ªÉ t·∫£i ·∫£nh featured
- **Relation:** n·∫øu mu·ªën li√™n k·∫øt b√†i vi·∫øt v·ªõi category ho·∫∑c t√°c gi·∫£.

### 3Ô∏è‚É£ T·∫°o n·ªôi dung m·∫´u v√† xu·∫•t b·∫£n

Sau khi t·∫°o Collection, v√†o menu Content Manager ‚Üí ch·ªçn collection m·ªõi ‚Üí th√™m b√†i vi·∫øt ‚Üí ƒëi·ªÅn n·ªôi dung ‚Üí b·∫•m Publish.

### 4Ô∏è‚É£ S·ª≠ d·ª•ng API ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu

Frontend c·ªßa b·∫°n (React, Vue, Next.js, Nuxt‚Ä¶) ch·ªâ c·∫ßn fetch API c·ªßa Strapi ƒë·ªÉ l·∫•y b√†i vi·∫øt. V√≠ d·ª•, g·ªçi \`GET /api/posts?populate=*\` ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu k√®m ·∫£nh, category, v.v.

---

## üöÄ H√£y b·∫Øt ƒë·∫ßu d·ª± √°n blog c·ªßa b·∫°n v·ªõi Strapi ngay h√¥m nay!

V·ªõi Strapi, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt h·ªá th·ªëng qu·∫£n tr·ªã n·ªôi dung m·∫°nh m·∫Ω, d·ªÖ m·ªü r·ªông, d·ªÖ b·∫£o tr√¨ v√† ti·∫øt ki·ªám th·ªùi gian ph√°t tri·ªÉn. H√£y th·ª≠ tr·∫£i nghi·ªám ngay ƒë·ªÉ c·∫£m nh·∫≠n s·ª± kh√°c bi·ªát!`,

        category: categoryId, // S·ª≠ d·ª•ng category ID thay v√¨ string
        author: "Ph√≤ng Ph√¢n T√≠ch S√†i Th√†nh Trading",
        tags: JSON.stringify(["t√†i ch√≠nh", "logistics", "th·ªã tr∆∞·ªùng"])
      }
    };

    try {
      const res = await fetch(`${API_URL}/posts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${API_TOKEN}`,
        },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        console.error(`‚ùå L·ªói t·∫°o b√†i vi·∫øt "${title}":`, await res.text());
      } else {
        console.log(`‚úÖ ƒê√£ t·∫°o: ${title} (Category: ${randomCategory})`);
      }
    } catch (error) {
      console.error(`‚ùå L·ªói k·∫øt n·ªëi API cho b√†i "${title}":`, error);
    }
  }
}

async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...');
  
  // T·∫°o categories tr∆∞·ªõc
  const categoryIds = await createCategories();
  
  if (Object.keys(categoryIds).length > 0) {
    // T·∫°o posts v·ªõi category relation
    await createSamplePosts(categoryIds);
    console.log('‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!');
  } else {
    console.error('‚ùå Kh√¥ng th·ªÉ t·∫°o categories, d·ª´ng t·∫°o posts');
  }
}

main();
